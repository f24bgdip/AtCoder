009 - Brute Force 2 
実行時間制限: 1 sec / メモリ制限: 1024 MB

配点: 
1000 点

注意
この問題は 2.4 節（計算量と全探索）と 3.7 節（動的計画法）両方で扱います。
全探索で解いても 1000 点中 500 点しか得られず、満点（AC）にならないことに注意してください。（本に記されている通り、一部の大きいケースでは現実的な時間で答えが求まらないからです）

問題文
N 枚のカードが横一列に並べられています。左から i 番目 (1≤i≤N) のカードには整数 A(i) が書かれています。
カードの中からいくつかを選んで、合計がちょうど S となるようにする方法はありますか。

制約
1≤N≤60
1≤A(i)≤10000
1≤S≤10000
入力はすべて整数

部分点
1≤N≤20 について解けると、500 点が獲得できます。

入力
入力は以下の形式で標準入力から与えられます。
N S
A(1) A(2) A(3) … A(N)
​ 
出力
合計を S となるようにする方法が存在する場合は Yes、そうでない場合は No と出力してください。

入力例 1
3 11
2 5 9

出力例 1
Yes

解説
カード 1,3 を選べば合計が 11 になるので答えは Yes です。


018 - Convenience Store 1 
実行時間制限: 1 sec / メモリ制限: 1024 MB

配点: 
1000 点

問題文
コンビニには N 個の品物が売られており、i 番目（1≤i≤N）の商品の値段は A(i) 円です。 異なる 2 つの品物を買う方法のうち、合計金額が 500 円となるものは何通りありますか。

制約
2≤N≤200000
A(i) は 100,200,300,400 のいずれか
入力はすべて整数

入力
入力は以下の形式で標準入力から与えられます。
N
A(1) A(2) ⋯ A(N)

出力
答えを出力してください。


019 - Choose Cards 1 
実行時間制限: 1 sec / メモリ制限: 1024 MB

配点: 
1000 点

問題文
N 枚のカードがあり、左から i 番目（1≤i≤N）のカードの色は A(i) です。 A(i)=1 のとき赤色、A(i)​ =2 のとき黄色、A(i)​ =3 のとき青色です。同じ色のカードを 2 枚選ぶ方法は何通りありますか。
制約
2≤N≤500000
1≤A(i)≤3
入力はすべて整数

入力
入力は以下の形式で標準入力から与えられます。
N
A(1)​ A(2) ⋯ A(N)
​
出力
答えを出力してください。


020 - Choose Cards 2 
実行時間制限: 5 sec / メモリ制限: 1024 MB

配点: 
1000 点

問題文
N 枚のカードがあり、左から i番目のカードには整数 A(i) が書かれています。
カードを 5枚選ぶ方法のうち、選んだカードに書かれた整数の和がちょうど 1000 となるものは何通りありますか。

制約
5≤N≤100
1≤A(i)≤1000
入力はすべて整数

入力
入力は以下の形式で標準入力から与えられます。
N
A(1) A(2​) … A(N)
​
出力
答えを出力してください。


問題文
N 枚のカードがあり、左から i 番目のカードには整数 A i​ が書かれています。 和が 100000 となる 2 枚のカードの選び方は何通りあるかを求めるプログラムを作成してください。

制約
2≤N≤200000
1≤A i​ ≤99999
入力はすべて整数


042 - Sum of Divisors / 
実行時間制限: 3 sec / メモリ制限: 1024 MB

配点 : 
400 点

問題文
正整数 X に対し、X の正の約数の個数を f(X) とします。
正整数 N が与えられるので、∑ K=1N​ K×f(K) を求めてください。

制約
1≤N≤10^7
 
入力
入力は以下の形式で標準入力から与えられる。
N

出力
値 ∑ K=1N​ K×f(K) を出力せよ。

入力例 1
4

出力例 1
23

f(1)=1, f(2)=2, f(3)=2, f(4)=3 なので、答えは 1×1+2×2+3×2+4×3=23 となります。

入力例 2
100

出力例 2
26879

入力例 3
10000000

出力例 3
838627288460105

オーバーフローに注意してください。


043 - Depth First Search 
実行時間制限: 1 sec / メモリ制限: 1024 MB

配点 : 
1000 点

問題文
各頂点に 1,2,…,N の番号がついた、 N 頂点 M 辺の無向グラフが与えられます。
i 番目の辺は頂点 A i​ と頂点 B i​ とを結んでいます。
このグラフ全体が連結であるかどうか判定して以下のように出力してください。
もしグラフ全体が連結であれば、 The graph is connected. と出力する
そうでなければ、 The graph is not connected. と出力する

制約
入力はすべて整数
1≤N≤10^5
0≤M≤min(10^5, N(N−1)/2)
1≤A i​ <B i​ ≤N
グラフに多重辺や自己ループは存在しない

入力
入力は以下の形式で標準入力から与えられる。
N M
A 1​ B 1​
A 2​ B 2
​⋮
A M​ B M​

出力
問題文中の指示通り出力せよ。

入力例 1
3 2
1 3
2 3

出力例 1
The graph is connected.
与えられたグラフは連結です。

入力例 2
6 6
1 4
2 3
3 4
5 6
1 2
2 4

出力例 2
The graph is not connected.
与えられたグラフは連結ではありません。


044 - Shortest Path 1 
実行時間制限: 1 sec / メモリ制限: 1024 MB

配点 : 
1000 点

問題文
N 頂点 M 辺の無向グラフが与えられます。各頂点には 1 から N までの番号が付けられており、i 番目の辺は頂点 A_{i}​ と頂点 B_{i}​ を結んでいます。
1 以上 N 以下の全ての整数 k について、以下の問いに答えてください。
頂点 1 から頂点 k まで、辺を何本かたどって移動することを考えるとき、たどるべき辺の本数の最小値を出力せよ。ただし、移動不可能な場合は −1 を出力せよ。

制約
入力はすべて整数
1≤N≤10^5
0≤M≤min(10^5 , 2N(N−1)​ )
1≤A_{i}​<B_{i}≤N
グラフに多重辺や自己ループは存在しない

入力
入力は以下の形式で標準入力から与えられる。
N M
A_{1}​ B_{1}
​A_{2}​ B_{2}​
⋮
A_{M}​ B_{M}​

出力
全体で N 行出力してください。
i 行目には、 k=i の場合の答えを出力してください。

入力例 1
3 2
1 3
2 3

出力例 1
0
2
1

解説 1
頂点 1 から頂点 1 には、 0 本の辺を辿って移動可能であるとします。頂点 1 から頂点 2 に移動する際、 1→3→2 と移動すると辿る辺の数が最小になります。
頂点 1 から頂点 3 に移動する際、 1→3 と移動すると辿る辺の数が最小になります。

入力例 2
6 6
1 4
2 3
3 4
5 6
1 2
2 4

出力例 2
0
1
2
1
-1
-1

解説 2
与えられるグラフが連結であるとは限りません。


045 - Easy Graph Problem（★2） 
実行時間制限: 2 sec / メモリ制限: 1024 MB

配点：
2 点

問題文
N 頂点 M 辺の連結な単純無向グラフが与えられます。グラフの頂点には、それぞれ 1 から N までの番号が振られています。 i 番目の辺は、頂点 a_{i}​ と b_{i}​ を双方向に結んでいます。
以下の条件を満たす頂点の個数はいくつあるか出力してください。
自分自身より頂点番号が小さい隣接頂点がちょうど 1 つ存在する

制約
2≤N≤100000
N−1≤M≤min( 2N(N−1)​ ,100000)
1≤a_{i}​ ,b_{i}​ ≤N
与えられるグラフは単純グラフである
与えられるグラフは連結である
入力はすべて整数で与えられる

入力
入力は以下の形式で標準入力から与えられます。
N M
a_{1}​ b_{1}​ 
⋮
a_{M}​ b_{M}​

出力
条件を満たす頂点の個数を一行に出力してください。

入力例 1
5 5
1 2
1 3
3 2
5 2
4 2

出力例 1
3

解説 1
条件を満たす頂点は、2, 4, 5 の 3 つです。
頂点 2 は、自分自身より頂点番号が小さい隣接頂点として、頂点 1 のみをもつ
頂点 4 は、自分自身より頂点番号が小さい隣接頂点として、頂点 2 のみをもつ
頂点 5 は、自分自身より頂点番号が小さい隣接頂点として、頂点 2 のみをもつ

入力例 2
2 1
1 2

出力例 2
1

解説 2
条件を満たす頂点は 2 のみです。

入力例 3
7 18
7 2
1 6
5 2
1 3
7 6
5 3
5 6
5 4
1 7
2 6
3 4
5 1
4 7
4 6
5 7
3 2
4 2
1 4

出力例 3
0


046 - 幅優先探索 
実行時間制限: 2 sec / メモリ制限: 256 MB

問題文
たかはし君は迷路が好きです。今、上下左右に移動できる二次元盤面上の迷路を解こうとしています。盤面は以下のような形式で与えられます。
まず、盤面のサイズと、迷路のスタート地点とゴール地点の座標が与えられる。
次に、それぞれのマスが通行可能な空きマス(.)か通行不可能な壁マス(#)かという情報を持った盤面が与えられる。盤面は壁マスで囲まれている。スタート地点とゴール地点は必ず空きマスであり、スタート地点からゴール地点へは、空きマスを辿って必ずたどり着ける。具体的には、入出力例を参考にすると良い。
今、彼は上記の迷路を解くのに必要な最小移動手数を求めたいと思っています。どうやって求めるかを調べていたところ、「幅優先探索」という手法が効率的であることを知りました。幅優先探索というのは以下の手法です。
スタート地点から近い(たどり着くための最短手数が少ない)マスから順番に、たどり着く手数を以下のように確定していく。説明の例として図1の迷路を利用する。

図1. 説明に用いる盤面
最初に、スタート地点は、スタート地点から手数0でたどり着ける(当然)ので、最短手数0で確定させる(図2)。
図2. 最短手数0でたどり着けるマスが確定(初期)
次に、スタート地点の四近傍(上下左右)の空きマスについて、手数1で確定させる(図3)。
図3. 最短手数1でたどり着けるマスが確定
次に、手数1で確定したそれぞれのマスの4近傍を見て、まだ確定していない空きマスがあればそのマスを手数2で確定させる(図4)。
図4. 最短手数2でたどり着けるマスが確定
次に、手数2で確定したそれぞれのマスの4近傍を見て、まだ確定していない空きマスがあればそのマスを手数3で確定させる(図5)。
図5. 最短手数3でたどり着けるマスが確定
次に、手数3で確定したそれぞれのマスの4近傍を見て、まだ確定していない空きマスがあればそのマスを手数4で確定させる(図6)。
図6. 最短手数4でたどり着けるマスが確定
上記の手順を確定の更新が無くなるまで繰り返すと、スタート地点からたどり着ける全ての空きマスについて最短手数が確定する(図7)。スタートとゴールは必ず空きマスを辿ってたどり着けるという制約があるので、ゴール地点への最短手数も分かる。
図7. すべてのたどり着けるマスへの最短手数が確定
さて、この処理をスマートに実装するためには、先入れ先出し(FIFO)のキュー(Queue)というデータ構造を用いると良いことが知られています。もちろん、使わなくても解くことは可能です。今回、よく分からなければ思いついた方法で解くことをおすすめします。先入れ先出しのキューとは以下のような機能を持つデータ構造です。
追加(Push): キューの末尾にデータを追加する。
取り出し(Pop): キューの先頭のデータを取り出す。
このデータ構造を使うと、先ほどの幅優先探索の説明における「マスの最短手数の確定」のタイミングでその確定マスをキューに追加し、追加操作が終わればPopを行い、取り出したマスの4近傍を調べるということを繰り返せば(つまり先に追加されたものから順番に処理していけば)、簡潔に処理ができることが分かります。

入力
入力は以下の形式で標準入力から与えられる。
R C
sy sx
gy gx
c (1,1)​ c (1,2)​  … c (1,C)​
c (2,1)​ c (2,2)  … c (2,C)
​:
c (R,1)​ c (R,2)​  … c (R,C)
​1 行目には、行数 R(1≦R≦50)と列数 C(1≦C≦50)がそれぞれ空白区切りで与えられる。
2 行目には、スタート地点の座標 (sy,sx) が空白区切りで与えられる。スタート地点が sy 行 
sx 列にあることを意味する。 
1≦sy≦R　かつ 1≦sx≦C である。
3 行目には、ゴール地点の座標 (gy,gx) が空白区切りで与えられる。ゴール地点が gy 行 
gx 列にあることを意味する。 
1≦gy≦R　かつ 1≦gx≦C であり、(gy,gx)≠(sy,sx)であることが保障されている。
4 行目から R 行、長さ C の文字列が 1 行ずつ与えられる。各文字は . もしくは # のいずれかであり、i 回目 (1≦i≦R) に与えられられる文字列のうち j 文字目 (1≦j≦C) について、その文字が . なら、マス (i,j) が空きマスであり、# なら、マス (i,j) が壁マスであることをあらわす。
盤面は壁マスで囲まれている。つまり、i=1,i=R,j=1,j=C のうちいずれか1つでも条件を満たすマス (i,j) について、c (i,j)​  は #である。また、スタート地点とゴール地点は必ず空きマスであり、スタート地点からゴール地点へは、空きマスを辿って必ずたどり着ける。

出力
スタート地点からゴール地点に移動する最小手数を 1 行に出力せよ。最後に改行を忘れないこと。

入力例1
7 8
2 2
4 5
########
#......#
#.######
#..#...#
#..##..#
##.....#
########

出力例1
11

入力例2
5 8
2 2
2 4
########
#.#....#
#.###..#
#......#
########

出力例2
10

図8のように進めば 10 手でたどり着くことが進むことができます(※Sはスタート、Gはゴールをあらわす)。
図8. 入出力例2において最小手数10を達成する進み方


047 - Bipartite Graph 
実行時間制限: 3 sec / メモリ制限: 1024 MB

配点: 
1000 点

問題文
頂点数が N、辺の数が M のグラフが与えられます。各頂点には 1 から N までの番号が付けられており、i 番目の辺 (1≤i≤M) は頂点 A_{i}​  と頂点 B_{i}​  を双方向に結んでいます。
このグラフが二部グラフであれば Yes を、二部グラフでなければ No を出力してください。

制約
1≤N,M≤200000
1≤A_{i}​ <B_{i}​ ≤N (1≤i≤M)
入力はすべて整数

入力
入力は以下の形式で標準入力から与えられます。
N M
A_{1}​  B_{1}
​⋮
A_{M}​  B_{M}
​ 
出力
与えられたグラフが二部グラフであれば Yes を、二部グラフでなければ No を出力してください。

入力例 1
8 7
1 5
1 6
2 7
3 7
4 6
5 8
6 8

出力例 1
Yes

入力例 2
6 7
1 6
2 6
3 6
2 4
3 5
1 3
1 4

出力例 2
No


048 - Small Multiple
実行時間制限: 2 sec / メモリ制限: 256 MB

配点 : 
700 点

問題文
K の正の倍数の 10 進法での各桁の和としてありうる最小の値を求めてください。

制約
2≤K≤10^5
K は整数である

入力
入力は以下の形式で標準入力から与えられる。
K

出力
K の倍数の 10 進法での各桁の和としてありうる最小の値を出力せよ。

入力例 1
6

出力例 1
3

解説 1
12=6×2 が最小値を達成します。

入力例 2
41

出力例 2
5

解説 2
11111=41×271 が最小値を達成します。

入力例 3
79992

出力例 3
36